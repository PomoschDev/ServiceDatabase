# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from DatabaseService import DatabaseService_pb2 as DatabaseService_dot_DatabaseService__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in DatabaseService/DatabaseService_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DatabaseServiceStub(object):
    """*
    Доступные API методы
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/service.DatabaseService/CreateUser',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.FromString,
                _registered_method=True)
        self.Users = channel.unary_unary(
                '/service.DatabaseService/Users',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.Empty.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.UsersResponse.FromString,
                _registered_method=True)
        self.IsRole = channel.unary_unary(
                '/service.DatabaseService/IsRole',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.IsRoleRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.IsRoleResponse.FromString,
                _registered_method=True)
        self.ComparePassword = channel.unary_unary(
                '/service.DatabaseService/ComparePassword',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.ComparePasswordRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.ComparePasswordResponse.FromString,
                _registered_method=True)
        self.UserIsExists = channel.unary_unary(
                '/service.DatabaseService/UserIsExists',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.UserIsExistsRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.UserIsExistsResponse.FromString,
                _registered_method=True)
        self.FindUserById = channel.unary_unary(
                '/service.DatabaseService/FindUserById',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindUserByIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.FromString,
                _registered_method=True)
        self.FindUserByEmail = channel.unary_unary(
                '/service.DatabaseService/FindUserByEmail',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindUserByEmailRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.FromString,
                _registered_method=True)
        self.FindUserByPhone = channel.unary_unary(
                '/service.DatabaseService/FindUserByPhone',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindUserByPhoneRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.FromString,
                _registered_method=True)
        self.ChangeUserType = channel.unary_unary(
                '/service.DatabaseService/ChangeUserType',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.ChangeUserTypeRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.ChangeUserTypeResponse.FromString,
                _registered_method=True)
        self.FindUserCompany = channel.unary_unary(
                '/service.DatabaseService/FindUserCompany',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindUserCompanyRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.Company.FromString,
                _registered_method=True)
        self.FindUserDonations = channel.unary_unary(
                '/service.DatabaseService/FindUserDonations',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindUserDonationsRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.FindUserDonationsResponse.FromString,
                _registered_method=True)
        self.FindUserCard = channel.unary_unary(
                '/service.DatabaseService/FindUserCard',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindUserCardRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.FindUserCardResponse.FromString,
                _registered_method=True)
        self.AddCardToUser = channel.unary_unary(
                '/service.DatabaseService/AddCardToUser',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.AddCardToUserRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.AddCardToUserResponse.FromString,
                _registered_method=True)
        self.DeleteUserByModel = channel.unary_unary(
                '/service.DatabaseService/DeleteUserByModel',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.DeleteUserByModelRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.DeleteUserById = channel.unary_unary(
                '/service.DatabaseService/DeleteUserById',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.DeleteUserByIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/service.DatabaseService/UpdateUser',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.FromString,
                _registered_method=True)
        self.Companies = channel.unary_unary(
                '/service.DatabaseService/Companies',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.Empty.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CompaniesResponse.FromString,
                _registered_method=True)
        self.CreateCompany = channel.unary_unary(
                '/service.DatabaseService/CreateCompany',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.CreateCompanyRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.Company.FromString,
                _registered_method=True)
        self.FindCompanyById = channel.unary_unary(
                '/service.DatabaseService/FindCompanyById',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindCompanyByIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.Company.FromString,
                _registered_method=True)
        self.FindCompanyByPhone = channel.unary_unary(
                '/service.DatabaseService/FindCompanyByPhone',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindCompanyByIdPhoneRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.Company.FromString,
                _registered_method=True)
        self.FindCompanyCard = channel.unary_unary(
                '/service.DatabaseService/FindCompanyCard',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindCompanyCardRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CardCompany.FromString,
                _registered_method=True)
        self.DeleteCompanyByModel = channel.unary_unary(
                '/service.DatabaseService/DeleteCompanyByModel',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.DeleteCompanyByModelRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.DeleteCompanyById = channel.unary_unary(
                '/service.DatabaseService/DeleteCompanyById',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.DeleteCompanyByIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.UpdateCompany = channel.unary_unary(
                '/service.DatabaseService/UpdateCompany',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.UpdateCompanyRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.AddCardToCompany = channel.unary_unary(
                '/service.DatabaseService/AddCardToCompany',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.AddCardToCompanyRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.AddCardToCompanyResponse.FromString,
                _registered_method=True)
        self.Cards = channel.unary_unary(
                '/service.DatabaseService/Cards',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.Empty.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CardsResponse.FromString,
                _registered_method=True)
        self.CreateCard = channel.unary_unary(
                '/service.DatabaseService/CreateCard',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.CreateCardRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.Card.FromString,
                _registered_method=True)
        self.FindCardById = channel.unary_unary(
                '/service.DatabaseService/FindCardById',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindCardByIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.Card.FromString,
                _registered_method=True)
        self.DeleteCardByModel = channel.unary_unary(
                '/service.DatabaseService/DeleteCardByModel',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.Card.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.DeleteCardById = channel.unary_unary(
                '/service.DatabaseService/DeleteCardById',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.DeleteCardByIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.UpdateCard = channel.unary_unary(
                '/service.DatabaseService/UpdateCard',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.Card.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.Card.FromString,
                _registered_method=True)
        self.CardsCompanies = channel.unary_unary(
                '/service.DatabaseService/CardsCompanies',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.Empty.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CardsCompaniesResponse.FromString,
                _registered_method=True)
        self.CreateCardCompany = channel.unary_unary(
                '/service.DatabaseService/CreateCardCompany',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.CreateCardCompanyRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CardCompany.FromString,
                _registered_method=True)
        self.FindCardCompanyByID = channel.unary_unary(
                '/service.DatabaseService/FindCardCompanyByID',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindCardCompanyByIDRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CardCompany.FromString,
                _registered_method=True)
        self.DeleteCardCompanyByModel = channel.unary_unary(
                '/service.DatabaseService/DeleteCardCompanyByModel',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.CardCompany.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.DeleteCardCompanyById = channel.unary_unary(
                '/service.DatabaseService/DeleteCardCompanyById',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.DeleteCardCompanyByIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.UpdateCardCompany = channel.unary_unary(
                '/service.DatabaseService/UpdateCardCompany',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.CardCompany.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CardCompany.FromString,
                _registered_method=True)
        self.Donations = channel.unary_unary(
                '/service.DatabaseService/Donations',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.Empty.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.DonationsResponse.FromString,
                _registered_method=True)
        self.CreateDonations = channel.unary_unary(
                '/service.DatabaseService/CreateDonations',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.CreateDonationsRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateDonationsResponse.FromString,
                _registered_method=True)
        self.FindDonationWards = channel.unary_unary(
                '/service.DatabaseService/FindDonationWards',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindDonationWardsRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.FindDonationWardsResponse.FromString,
                _registered_method=True)
        self.FindDonationById = channel.unary_unary(
                '/service.DatabaseService/FindDonationById',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindDonationByIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateDonationsResponse.FromString,
                _registered_method=True)
        self.DeleteDonationByModel = channel.unary_unary(
                '/service.DatabaseService/DeleteDonationByModel',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.DeleteDonationByModelRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.DeleteDonationById = channel.unary_unary(
                '/service.DatabaseService/DeleteDonationById',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.DeleteDonationByIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.UpdateDonation = channel.unary_unary(
                '/service.DatabaseService/UpdateDonation',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.UpdateDonationsRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateDonationsResponse.FromString,
                _registered_method=True)
        self.Wards = channel.unary_unary(
                '/service.DatabaseService/Wards',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.Empty.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.WardsResponse.FromString,
                _registered_method=True)
        self.CreateWard = channel.unary_unary(
                '/service.DatabaseService/CreateWard',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.CreateWardRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.Ward.FromString,
                _registered_method=True)
        self.FindWardById = channel.unary_unary(
                '/service.DatabaseService/FindWardById',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindWardByIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.Ward.FromString,
                _registered_method=True)
        self.DeleteWardByModel = channel.unary_unary(
                '/service.DatabaseService/DeleteWardByModel',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.Ward.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.DeleteWardById = channel.unary_unary(
                '/service.DatabaseService/DeleteWardById',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.DeleteWardByIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.UpdateWard = channel.unary_unary(
                '/service.DatabaseService/UpdateWard',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.Ward.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.Ward.FromString,
                _registered_method=True)
        self.CreateSessions = channel.unary_unary(
                '/service.DatabaseService/CreateSessions',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateSessionResponse.FromString,
                _registered_method=True)
        self.Sessions = channel.unary_unary(
                '/service.DatabaseService/Sessions',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.Empty.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.SessionsResponse.FromString,
                _registered_method=True)
        self.FindSessionsById = channel.unary_unary(
                '/service.DatabaseService/FindSessionsById',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindSessionsByIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.FindSessionsByIdResponse.FromString,
                _registered_method=True)
        self.FindSessionsByUserId = channel.unary_unary(
                '/service.DatabaseService/FindSessionsByUserId',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.FindSessionsByUserIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.FindSessionsByUserIdResponse.FromString,
                _registered_method=True)
        self.ChangeRefreshTokenById = channel.unary_unary(
                '/service.DatabaseService/ChangeRefreshTokenById',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.ChangeRefreshTokenByIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.ChangeRefreshTokenByIdResponse.FromString,
                _registered_method=True)
        self.ChangeRefreshTokenByUserId = channel.unary_unary(
                '/service.DatabaseService/ChangeRefreshTokenByUserId',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.ChangeRefreshTokenByUserIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.ChangeRefreshTokenByUserIdResponse.FromString,
                _registered_method=True)
        self.DeleteSessionByModel = channel.unary_unary(
                '/service.DatabaseService/DeleteSessionByModel',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.DeleteSessionByModelRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.DeleteSessionById = channel.unary_unary(
                '/service.DatabaseService/DeleteSessionById',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.DeleteSessionByIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)
        self.DeleteSessionByUserId = channel.unary_unary(
                '/service.DatabaseService/DeleteSessionByUserId',
                request_serializer=DatabaseService_dot_DatabaseService__pb2.DeleteSessionByUserIdRequest.SerializeToString,
                response_deserializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
                _registered_method=True)


class DatabaseServiceServicer(object):
    """*
    Доступные API методы
    """

    def CreateUser(self, request, context):
        """*
        Создание нового пользователя
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Users(self, request, context):
        """*
        Список всех пользователей
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsRole(self, request, context):
        """*
        Проверяет принадлежность пользователя к необходимой роли
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComparePassword(self, request, context):
        """*
        Сравнивает введенный пароль пользователя с тем, что находится в базе данных
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserIsExists(self, request, context):
        """*
        Проверка на существования пользователя в базе данных (проверяет по номеру телефона)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindUserById(self, request, context):
        """*
        Поиск пользователя по его ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindUserByEmail(self, request, context):
        """*
        Поиск пользователя по его email
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindUserByPhone(self, request, context):
        """*
        Поиск пользователя по номеру телефона
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeUserType(self, request, context):
        """*
        Изменение типа пользователя (0 - физическое лицо, 1 - юридическое лицо)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindUserCompany(self, request, context):
        """*
        Поиск компании определенного пользователя
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindUserDonations(self, request, context):
        """*
        Поиск пожертвований определенного пользователя
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindUserCard(self, request, context):
        """*
        Поиск банковских карт определенного пользователя
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddCardToUser(self, request, context):
        """*
        Добавляет банковскую карту пользователю
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUserByModel(self, request, context):
        """*
        Удаление пользователя по полной модели (например полученной с помощью FindUserById)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUserById(self, request, context):
        """*
        Удаляет пользователя по его ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """*
        Обновление пользователя
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Companies(self, request, context):
        """*
        Список всех компаний
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCompany(self, request, context):
        """*
        Создание компании
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindCompanyById(self, request, context):
        """*
        Поиск компании по ее ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindCompanyByPhone(self, request, context):
        """*
        Поиск компании по номеру телефона
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindCompanyCard(self, request, context):
        """*
        Поиск банковской карты компании
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCompanyByModel(self, request, context):
        """*
        Удаление компании по модели (например полученной с помощью  FindCompanyById)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCompanyById(self, request, context):
        """*
        Удаление компании по ее ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCompany(self, request, context):
        """*
        Обновление компании
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddCardToCompany(self, request, context):
        """*
        Добавляет банковскую карту пользователю
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cards(self, request, context):
        """*
        Поиск всех банковских карт пользователей
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCard(self, request, context):
        """*
        Создание банковской карты
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindCardById(self, request, context):
        """*
        Поиск банковской карты по ее ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCardByModel(self, request, context):
        """*
        Удаление банковской карты по модели (например полученной с помощью FindCardById)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCardById(self, request, context):
        """*
        Удаление банковской карты по ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCard(self, request, context):
        """*
        Обновление банковской карты пользователя
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CardsCompanies(self, request, context):
        """*
        Поиск всех банковских карт компаний
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCardCompany(self, request, context):
        """*
        Создание банковской карты компании
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindCardCompanyByID(self, request, context):
        """*
        Поиск банковской карты компании по ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCardCompanyByModel(self, request, context):
        """*
        Удаление банковской карты по модели (например полученной с помощью FindCardCompanyByID)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCardCompanyById(self, request, context):
        """*
        Удаление банковской карты компании по ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCardCompany(self, request, context):
        """*
        Обновление банковской карты компании
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Donations(self, request, context):
        """*
        Список всех пожертвований
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDonations(self, request, context):
        """*
        Создание пожертвования
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindDonationWards(self, request, context):
        """*
        Поиск подопечных по ID пожертвования
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindDonationById(self, request, context):
        """*
        Поиск пожертвования по ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDonationByModel(self, request, context):
        """*
        Удаление пожертвования по модели (например полученного с помощью FindDonationById)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDonationById(self, request, context):
        """*
        Удаление пожертвование по ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDonation(self, request, context):
        """*
        Обновление пожертвования
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Wards(self, request, context):
        """*
        Список всех подопечных
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWard(self, request, context):
        """*
        Создание подопечного
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindWardById(self, request, context):
        """*
        Поиск подопечного по его ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWardByModel(self, request, context):
        """*
        Удаление подопечного по модели (например полученной с помощью FindWardById)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWardById(self, request, context):
        """*
        Удаление подопечного по его ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWard(self, request, context):
        """*
        Обновление подопечного
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSessions(self, request, context):
        """*
        Создание новой сессии
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Sessions(self, request, context):
        """*
        Список всех сессии
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindSessionsById(self, request, context):
        """*
        Поиск сессии по его ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindSessionsByUserId(self, request, context):
        """*
        Поиск сессии по UserID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeRefreshTokenById(self, request, context):
        """*
        Обновление поля RefreshToken по ID сессии
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeRefreshTokenByUserId(self, request, context):
        """*
        Обновление поля RefreshToken по UserID пользователя
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSessionByModel(self, request, context):
        """*
        Удаление сессии по полной модели (например полученной с помощью FindSessionById)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSessionById(self, request, context):
        """*
        Удаляет сессию по ее ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSessionByUserId(self, request, context):
        """*
        Удаляет сессию по ее UserID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateUserRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.SerializeToString,
            ),
            'Users': grpc.unary_unary_rpc_method_handler(
                    servicer.Users,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.Empty.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.UsersResponse.SerializeToString,
            ),
            'IsRole': grpc.unary_unary_rpc_method_handler(
                    servicer.IsRole,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.IsRoleRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.IsRoleResponse.SerializeToString,
            ),
            'ComparePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ComparePassword,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.ComparePasswordRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.ComparePasswordResponse.SerializeToString,
            ),
            'UserIsExists': grpc.unary_unary_rpc_method_handler(
                    servicer.UserIsExists,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.UserIsExistsRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.UserIsExistsResponse.SerializeToString,
            ),
            'FindUserById': grpc.unary_unary_rpc_method_handler(
                    servicer.FindUserById,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindUserByIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.SerializeToString,
            ),
            'FindUserByEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.FindUserByEmail,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindUserByEmailRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.SerializeToString,
            ),
            'FindUserByPhone': grpc.unary_unary_rpc_method_handler(
                    servicer.FindUserByPhone,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindUserByPhoneRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.SerializeToString,
            ),
            'ChangeUserType': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeUserType,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.ChangeUserTypeRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.ChangeUserTypeResponse.SerializeToString,
            ),
            'FindUserCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.FindUserCompany,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindUserCompanyRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.Company.SerializeToString,
            ),
            'FindUserDonations': grpc.unary_unary_rpc_method_handler(
                    servicer.FindUserDonations,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindUserDonationsRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.FindUserDonationsResponse.SerializeToString,
            ),
            'FindUserCard': grpc.unary_unary_rpc_method_handler(
                    servicer.FindUserCard,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindUserCardRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.FindUserCardResponse.SerializeToString,
            ),
            'AddCardToUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCardToUser,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.AddCardToUserRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.AddCardToUserResponse.SerializeToString,
            ),
            'DeleteUserByModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUserByModel,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.DeleteUserByModelRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'DeleteUserById': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUserById,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.DeleteUserByIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.UpdateUserRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.SerializeToString,
            ),
            'Companies': grpc.unary_unary_rpc_method_handler(
                    servicer.Companies,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.Empty.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CompaniesResponse.SerializeToString,
            ),
            'CreateCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCompany,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateCompanyRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.Company.SerializeToString,
            ),
            'FindCompanyById': grpc.unary_unary_rpc_method_handler(
                    servicer.FindCompanyById,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindCompanyByIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.Company.SerializeToString,
            ),
            'FindCompanyByPhone': grpc.unary_unary_rpc_method_handler(
                    servicer.FindCompanyByPhone,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindCompanyByIdPhoneRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.Company.SerializeToString,
            ),
            'FindCompanyCard': grpc.unary_unary_rpc_method_handler(
                    servicer.FindCompanyCard,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindCompanyCardRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CardCompany.SerializeToString,
            ),
            'DeleteCompanyByModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCompanyByModel,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.DeleteCompanyByModelRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'DeleteCompanyById': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCompanyById,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.DeleteCompanyByIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'UpdateCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCompany,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.UpdateCompanyRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'AddCardToCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCardToCompany,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.AddCardToCompanyRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.AddCardToCompanyResponse.SerializeToString,
            ),
            'Cards': grpc.unary_unary_rpc_method_handler(
                    servicer.Cards,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.Empty.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CardsResponse.SerializeToString,
            ),
            'CreateCard': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCard,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateCardRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.Card.SerializeToString,
            ),
            'FindCardById': grpc.unary_unary_rpc_method_handler(
                    servicer.FindCardById,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindCardByIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.Card.SerializeToString,
            ),
            'DeleteCardByModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCardByModel,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.Card.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'DeleteCardById': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCardById,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.DeleteCardByIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'UpdateCard': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCard,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.Card.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.Card.SerializeToString,
            ),
            'CardsCompanies': grpc.unary_unary_rpc_method_handler(
                    servicer.CardsCompanies,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.Empty.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CardsCompaniesResponse.SerializeToString,
            ),
            'CreateCardCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCardCompany,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateCardCompanyRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CardCompany.SerializeToString,
            ),
            'FindCardCompanyByID': grpc.unary_unary_rpc_method_handler(
                    servicer.FindCardCompanyByID,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindCardCompanyByIDRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CardCompany.SerializeToString,
            ),
            'DeleteCardCompanyByModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCardCompanyByModel,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.CardCompany.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'DeleteCardCompanyById': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCardCompanyById,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.DeleteCardCompanyByIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'UpdateCardCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCardCompany,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.CardCompany.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CardCompany.SerializeToString,
            ),
            'Donations': grpc.unary_unary_rpc_method_handler(
                    servicer.Donations,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.Empty.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.DonationsResponse.SerializeToString,
            ),
            'CreateDonations': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDonations,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateDonationsRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CreateDonationsResponse.SerializeToString,
            ),
            'FindDonationWards': grpc.unary_unary_rpc_method_handler(
                    servicer.FindDonationWards,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindDonationWardsRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.FindDonationWardsResponse.SerializeToString,
            ),
            'FindDonationById': grpc.unary_unary_rpc_method_handler(
                    servicer.FindDonationById,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindDonationByIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CreateDonationsResponse.SerializeToString,
            ),
            'DeleteDonationByModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDonationByModel,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.DeleteDonationByModelRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'DeleteDonationById': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDonationById,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.DeleteDonationByIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'UpdateDonation': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDonation,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.UpdateDonationsRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CreateDonationsResponse.SerializeToString,
            ),
            'Wards': grpc.unary_unary_rpc_method_handler(
                    servicer.Wards,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.Empty.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.WardsResponse.SerializeToString,
            ),
            'CreateWard': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWard,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateWardRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.Ward.SerializeToString,
            ),
            'FindWardById': grpc.unary_unary_rpc_method_handler(
                    servicer.FindWardById,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindWardByIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.Ward.SerializeToString,
            ),
            'DeleteWardByModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWardByModel,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.Ward.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'DeleteWardById': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWardById,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.DeleteWardByIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'UpdateWard': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWard,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.Ward.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.Ward.SerializeToString,
            ),
            'CreateSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSessions,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.CreateSessionRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.CreateSessionResponse.SerializeToString,
            ),
            'Sessions': grpc.unary_unary_rpc_method_handler(
                    servicer.Sessions,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.Empty.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.SessionsResponse.SerializeToString,
            ),
            'FindSessionsById': grpc.unary_unary_rpc_method_handler(
                    servicer.FindSessionsById,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindSessionsByIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.FindSessionsByIdResponse.SerializeToString,
            ),
            'FindSessionsByUserId': grpc.unary_unary_rpc_method_handler(
                    servicer.FindSessionsByUserId,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.FindSessionsByUserIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.FindSessionsByUserIdResponse.SerializeToString,
            ),
            'ChangeRefreshTokenById': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeRefreshTokenById,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.ChangeRefreshTokenByIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.ChangeRefreshTokenByIdResponse.SerializeToString,
            ),
            'ChangeRefreshTokenByUserId': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeRefreshTokenByUserId,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.ChangeRefreshTokenByUserIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.ChangeRefreshTokenByUserIdResponse.SerializeToString,
            ),
            'DeleteSessionByModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSessionByModel,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.DeleteSessionByModelRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'DeleteSessionById': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSessionById,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.DeleteSessionByIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
            'DeleteSessionByUserId': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSessionByUserId,
                    request_deserializer=DatabaseService_dot_DatabaseService__pb2.DeleteSessionByUserIdRequest.FromString,
                    response_serializer=DatabaseService_dot_DatabaseService__pb2.HTTPCodes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service.DatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('service.DatabaseService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DatabaseService(object):
    """*
    Доступные API методы
    """

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/CreateUser',
            DatabaseService_dot_DatabaseService__pb2.CreateUserRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Users(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/Users',
            DatabaseService_dot_DatabaseService__pb2.Empty.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.UsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/IsRole',
            DatabaseService_dot_DatabaseService__pb2.IsRoleRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.IsRoleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ComparePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/ComparePassword',
            DatabaseService_dot_DatabaseService__pb2.ComparePasswordRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.ComparePasswordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UserIsExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/UserIsExists',
            DatabaseService_dot_DatabaseService__pb2.UserIsExistsRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.UserIsExistsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindUserById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindUserById',
            DatabaseService_dot_DatabaseService__pb2.FindUserByIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindUserByEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindUserByEmail',
            DatabaseService_dot_DatabaseService__pb2.FindUserByEmailRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindUserByPhone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindUserByPhone',
            DatabaseService_dot_DatabaseService__pb2.FindUserByPhoneRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangeUserType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/ChangeUserType',
            DatabaseService_dot_DatabaseService__pb2.ChangeUserTypeRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.ChangeUserTypeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindUserCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindUserCompany',
            DatabaseService_dot_DatabaseService__pb2.FindUserCompanyRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.Company.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindUserDonations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindUserDonations',
            DatabaseService_dot_DatabaseService__pb2.FindUserDonationsRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.FindUserDonationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindUserCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindUserCard',
            DatabaseService_dot_DatabaseService__pb2.FindUserCardRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.FindUserCardResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddCardToUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/AddCardToUser',
            DatabaseService_dot_DatabaseService__pb2.AddCardToUserRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.AddCardToUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUserByModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteUserByModel',
            DatabaseService_dot_DatabaseService__pb2.DeleteUserByModelRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUserById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteUserById',
            DatabaseService_dot_DatabaseService__pb2.DeleteUserByIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/UpdateUser',
            DatabaseService_dot_DatabaseService__pb2.UpdateUserRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CreateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Companies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/Companies',
            DatabaseService_dot_DatabaseService__pb2.Empty.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CompaniesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/CreateCompany',
            DatabaseService_dot_DatabaseService__pb2.CreateCompanyRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.Company.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindCompanyById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindCompanyById',
            DatabaseService_dot_DatabaseService__pb2.FindCompanyByIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.Company.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindCompanyByPhone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindCompanyByPhone',
            DatabaseService_dot_DatabaseService__pb2.FindCompanyByIdPhoneRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.Company.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindCompanyCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindCompanyCard',
            DatabaseService_dot_DatabaseService__pb2.FindCompanyCardRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CardCompany.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCompanyByModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteCompanyByModel',
            DatabaseService_dot_DatabaseService__pb2.DeleteCompanyByModelRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCompanyById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteCompanyById',
            DatabaseService_dot_DatabaseService__pb2.DeleteCompanyByIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/UpdateCompany',
            DatabaseService_dot_DatabaseService__pb2.UpdateCompanyRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddCardToCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/AddCardToCompany',
            DatabaseService_dot_DatabaseService__pb2.AddCardToCompanyRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.AddCardToCompanyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Cards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/Cards',
            DatabaseService_dot_DatabaseService__pb2.Empty.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CardsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/CreateCard',
            DatabaseService_dot_DatabaseService__pb2.CreateCardRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.Card.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindCardById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindCardById',
            DatabaseService_dot_DatabaseService__pb2.FindCardByIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.Card.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCardByModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteCardByModel',
            DatabaseService_dot_DatabaseService__pb2.Card.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCardById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteCardById',
            DatabaseService_dot_DatabaseService__pb2.DeleteCardByIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/UpdateCard',
            DatabaseService_dot_DatabaseService__pb2.Card.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.Card.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CardsCompanies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/CardsCompanies',
            DatabaseService_dot_DatabaseService__pb2.Empty.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CardsCompaniesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCardCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/CreateCardCompany',
            DatabaseService_dot_DatabaseService__pb2.CreateCardCompanyRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CardCompany.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindCardCompanyByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindCardCompanyByID',
            DatabaseService_dot_DatabaseService__pb2.FindCardCompanyByIDRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CardCompany.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCardCompanyByModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteCardCompanyByModel',
            DatabaseService_dot_DatabaseService__pb2.CardCompany.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCardCompanyById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteCardCompanyById',
            DatabaseService_dot_DatabaseService__pb2.DeleteCardCompanyByIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCardCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/UpdateCardCompany',
            DatabaseService_dot_DatabaseService__pb2.CardCompany.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CardCompany.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Donations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/Donations',
            DatabaseService_dot_DatabaseService__pb2.Empty.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.DonationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateDonations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/CreateDonations',
            DatabaseService_dot_DatabaseService__pb2.CreateDonationsRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CreateDonationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindDonationWards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindDonationWards',
            DatabaseService_dot_DatabaseService__pb2.FindDonationWardsRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.FindDonationWardsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindDonationById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindDonationById',
            DatabaseService_dot_DatabaseService__pb2.FindDonationByIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CreateDonationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteDonationByModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteDonationByModel',
            DatabaseService_dot_DatabaseService__pb2.DeleteDonationByModelRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteDonationById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteDonationById',
            DatabaseService_dot_DatabaseService__pb2.DeleteDonationByIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDonation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/UpdateDonation',
            DatabaseService_dot_DatabaseService__pb2.UpdateDonationsRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CreateDonationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Wards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/Wards',
            DatabaseService_dot_DatabaseService__pb2.Empty.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.WardsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateWard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/CreateWard',
            DatabaseService_dot_DatabaseService__pb2.CreateWardRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.Ward.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindWardById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindWardById',
            DatabaseService_dot_DatabaseService__pb2.FindWardByIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.Ward.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteWardByModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteWardByModel',
            DatabaseService_dot_DatabaseService__pb2.Ward.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteWardById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteWardById',
            DatabaseService_dot_DatabaseService__pb2.DeleteWardByIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateWard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/UpdateWard',
            DatabaseService_dot_DatabaseService__pb2.Ward.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.Ward.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/CreateSessions',
            DatabaseService_dot_DatabaseService__pb2.CreateSessionRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.CreateSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Sessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/Sessions',
            DatabaseService_dot_DatabaseService__pb2.Empty.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.SessionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindSessionsById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindSessionsById',
            DatabaseService_dot_DatabaseService__pb2.FindSessionsByIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.FindSessionsByIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindSessionsByUserId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/FindSessionsByUserId',
            DatabaseService_dot_DatabaseService__pb2.FindSessionsByUserIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.FindSessionsByUserIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangeRefreshTokenById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/ChangeRefreshTokenById',
            DatabaseService_dot_DatabaseService__pb2.ChangeRefreshTokenByIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.ChangeRefreshTokenByIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangeRefreshTokenByUserId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/ChangeRefreshTokenByUserId',
            DatabaseService_dot_DatabaseService__pb2.ChangeRefreshTokenByUserIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.ChangeRefreshTokenByUserIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSessionByModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteSessionByModel',
            DatabaseService_dot_DatabaseService__pb2.DeleteSessionByModelRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSessionById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteSessionById',
            DatabaseService_dot_DatabaseService__pb2.DeleteSessionByIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSessionByUserId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.DatabaseService/DeleteSessionByUserId',
            DatabaseService_dot_DatabaseService__pb2.DeleteSessionByUserIdRequest.SerializeToString,
            DatabaseService_dot_DatabaseService__pb2.HTTPCodes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
