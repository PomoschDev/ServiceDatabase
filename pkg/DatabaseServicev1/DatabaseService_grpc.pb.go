// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: DatabaseService/DatabaseService.proto

package DatabaseServicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DatabaseService_CreateUser_FullMethodName               = "/service.DatabaseService/CreateUser"
	DatabaseService_Users_FullMethodName                    = "/service.DatabaseService/Users"
	DatabaseService_IsRole_FullMethodName                   = "/service.DatabaseService/IsRole"
	DatabaseService_ComparePassword_FullMethodName          = "/service.DatabaseService/ComparePassword"
	DatabaseService_UserIsExists_FullMethodName             = "/service.DatabaseService/UserIsExists"
	DatabaseService_FindUserById_FullMethodName             = "/service.DatabaseService/FindUserById"
	DatabaseService_FindUserByEmail_FullMethodName          = "/service.DatabaseService/FindUserByEmail"
	DatabaseService_FindUserByPhone_FullMethodName          = "/service.DatabaseService/FindUserByPhone"
	DatabaseService_ChangeUserType_FullMethodName           = "/service.DatabaseService/ChangeUserType"
	DatabaseService_FindUserCompany_FullMethodName          = "/service.DatabaseService/FindUserCompany"
	DatabaseService_FindUserDonations_FullMethodName        = "/service.DatabaseService/FindUserDonations"
	DatabaseService_FindUserCard_FullMethodName             = "/service.DatabaseService/FindUserCard"
	DatabaseService_AddCardToUser_FullMethodName            = "/service.DatabaseService/AddCardToUser"
	DatabaseService_DeleteUserByModel_FullMethodName        = "/service.DatabaseService/DeleteUserByModel"
	DatabaseService_DeleteUserById_FullMethodName           = "/service.DatabaseService/DeleteUserById"
	DatabaseService_UpdateUser_FullMethodName               = "/service.DatabaseService/UpdateUser"
	DatabaseService_Companies_FullMethodName                = "/service.DatabaseService/Companies"
	DatabaseService_CreateCompany_FullMethodName            = "/service.DatabaseService/CreateCompany"
	DatabaseService_FindCompanyById_FullMethodName          = "/service.DatabaseService/FindCompanyById"
	DatabaseService_FindCompanyByPhone_FullMethodName       = "/service.DatabaseService/FindCompanyByPhone"
	DatabaseService_FindCompanyCard_FullMethodName          = "/service.DatabaseService/FindCompanyCard"
	DatabaseService_DeleteCompanyByModel_FullMethodName     = "/service.DatabaseService/DeleteCompanyByModel"
	DatabaseService_DeleteCompanyById_FullMethodName        = "/service.DatabaseService/DeleteCompanyById"
	DatabaseService_UpdateCompany_FullMethodName            = "/service.DatabaseService/UpdateCompany"
	DatabaseService_Cards_FullMethodName                    = "/service.DatabaseService/Cards"
	DatabaseService_CreateCard_FullMethodName               = "/service.DatabaseService/CreateCard"
	DatabaseService_FindCardById_FullMethodName             = "/service.DatabaseService/FindCardById"
	DatabaseService_DeleteCardByModel_FullMethodName        = "/service.DatabaseService/DeleteCardByModel"
	DatabaseService_DeleteCardById_FullMethodName           = "/service.DatabaseService/DeleteCardById"
	DatabaseService_UpdateCard_FullMethodName               = "/service.DatabaseService/UpdateCard"
	DatabaseService_CardsCompanies_FullMethodName           = "/service.DatabaseService/CardsCompanies"
	DatabaseService_CreateCardCompany_FullMethodName        = "/service.DatabaseService/CreateCardCompany"
	DatabaseService_FindCardCompanyByID_FullMethodName      = "/service.DatabaseService/FindCardCompanyByID"
	DatabaseService_DeleteCardCompanyByModel_FullMethodName = "/service.DatabaseService/DeleteCardCompanyByModel"
	DatabaseService_DeleteCardCompanyById_FullMethodName    = "/service.DatabaseService/DeleteCardCompanyById"
	DatabaseService_UpdateCardCompany_FullMethodName        = "/service.DatabaseService/UpdateCardCompany"
	DatabaseService_Donations_FullMethodName                = "/service.DatabaseService/Donations"
	DatabaseService_CreateDonations_FullMethodName          = "/service.DatabaseService/CreateDonations"
	DatabaseService_FindDonationWards_FullMethodName        = "/service.DatabaseService/FindDonationWards"
	DatabaseService_FindDonationById_FullMethodName         = "/service.DatabaseService/FindDonationById"
	DatabaseService_DeleteDonationByModel_FullMethodName    = "/service.DatabaseService/DeleteDonationByModel"
	DatabaseService_DeleteDonationById_FullMethodName       = "/service.DatabaseService/DeleteDonationById"
	DatabaseService_UpdateDonation_FullMethodName           = "/service.DatabaseService/UpdateDonation"
	DatabaseService_Wards_FullMethodName                    = "/service.DatabaseService/Wards"
	DatabaseService_CreateWard_FullMethodName               = "/service.DatabaseService/CreateWard"
	DatabaseService_FindWardById_FullMethodName             = "/service.DatabaseService/FindWardById"
	DatabaseService_DeleteWardByModel_FullMethodName        = "/service.DatabaseService/DeleteWardByModel"
	DatabaseService_DeleteWardById_FullMethodName           = "/service.DatabaseService/DeleteWardById"
	DatabaseService_UpdateWard_FullMethodName               = "/service.DatabaseService/UpdateWard"
)

// DatabaseServiceClient is the client API for DatabaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Доступные API методы
type DatabaseServiceClient interface {
	// *
	// Создание нового пользователя
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// *
	// Список всех пользователей
	Users(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UsersResponse, error)
	// *
	// Проверяет принадлежность пользователя к необходимой роли
	IsRole(ctx context.Context, in *IsRoleRequest, opts ...grpc.CallOption) (*IsRoleResponse, error)
	// *
	// Сравнивает введенный пароль пользователя с тем, что находится в базе данных
	ComparePassword(ctx context.Context, in *ComparePasswordRequest, opts ...grpc.CallOption) (*ComparePasswordResponse, error)
	// *
	// Проверка на существования пользователя в базе данных (проверяет по номеру телефона)
	UserIsExists(ctx context.Context, in *UserIsExistsRequest, opts ...grpc.CallOption) (*UserIsExistsResponse, error)
	// *
	// Поиск пользователя по его ID
	FindUserById(ctx context.Context, in *FindUserByIdRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// *
	// Поиск пользователя по его email
	FindUserByEmail(ctx context.Context, in *FindUserByEmailRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// *
	// Поиск пользователя по номеру телефона
	FindUserByPhone(ctx context.Context, in *FindUserByPhoneRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// *
	// Изменение типа пользователя (0 - физическое лицо, 1 - юридическое лицо)
	ChangeUserType(ctx context.Context, in *ChangeUserTypeRequest, opts ...grpc.CallOption) (*ChangeUserTypeResponse, error)
	// *
	// Поиск компании определенного пользователя
	FindUserCompany(ctx context.Context, in *FindUserCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	// *
	// Поиск пожертвований определенного пользователя
	FindUserDonations(ctx context.Context, in *FindUserDonationsRequest, opts ...grpc.CallOption) (*FindUserDonationsResponse, error)
	// *
	// Поиск банковских карт определенного пользователя
	FindUserCard(ctx context.Context, in *FindUserCardRequest, opts ...grpc.CallOption) (*FindUserCardResponse, error)
	// *
	// Добавляет банковскую карту пользователю
	AddCardToUser(ctx context.Context, in *AddCardToUserRequest, opts ...grpc.CallOption) (*AddCardToUserResponse, error)
	// *
	// Удаление пользователя по полной модели (например полученной с помощью FindUserById)
	DeleteUserByModel(ctx context.Context, in *DeleteUserByModelRequest, opts ...grpc.CallOption) (*HTTPCodes, error)
	// *
	// Удаляет пользователя по его ID
	DeleteUserById(ctx context.Context, in *DeleteUserByIdRequest, opts ...grpc.CallOption) (*HTTPCodes, error)
	// *
	// Обновление пользователя
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// *
	// Список всех компаний
	Companies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CompaniesResponse, error)
	// *
	// Создание компании
	CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	// *
	// Поиск компании по ее ID
	FindCompanyById(ctx context.Context, in *FindCompanyByIdRequest, opts ...grpc.CallOption) (*Company, error)
	// *
	// Поиск компании по номеру телефона
	FindCompanyByPhone(ctx context.Context, in *FindCompanyByIdPhoneRequest, opts ...grpc.CallOption) (*Company, error)
	// *
	// Поиск банковской карты компании
	FindCompanyCard(ctx context.Context, in *FindCompanyCardRequest, opts ...grpc.CallOption) (*CardCompany, error)
	// *
	// Удаление компании по модели (например полученной с помощью  FindCompanyById)
	DeleteCompanyByModel(ctx context.Context, in *DeleteCompanyByModelRequest, opts ...grpc.CallOption) (*HTTPCodes, error)
	// *
	// Удаление компании по ее ID
	DeleteCompanyById(ctx context.Context, in *DeleteCompanyByIdRequest, opts ...grpc.CallOption) (*HTTPCodes, error)
	// *
	// Обновление компании
	UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*HTTPCodes, error)
	// *
	// Поиск всех банковских карт пользователей
	Cards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CardsResponse, error)
	// *
	// Создание банковской карты
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*Card, error)
	// *
	// Поиск банковской карты по ее ID
	FindCardById(ctx context.Context, in *FindCardByIdRequest, opts ...grpc.CallOption) (*Card, error)
	// *
	// Удаление банковской карты по модели (например полученной с помощью FindCardById)
	DeleteCardByModel(ctx context.Context, in *Card, opts ...grpc.CallOption) (*HTTPCodes, error)
	// *
	// Удаление банковской карты по ID
	DeleteCardById(ctx context.Context, in *DeleteCardByIdRequest, opts ...grpc.CallOption) (*HTTPCodes, error)
	// *
	// Обновление банковской карты
	UpdateCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Card, error)
	// *
	// Поиск всех банковских карт компаний
	CardsCompanies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CardsCompaniesResponse, error)
	// *
	// Создание банковской карты компании
	CreateCardCompany(ctx context.Context, in *CreateCardCompanyRequest, opts ...grpc.CallOption) (*CardCompany, error)
	// *
	// Поиск банковской карты компании по ID
	FindCardCompanyByID(ctx context.Context, in *FindCardCompanyByIDRequest, opts ...grpc.CallOption) (*CardCompany, error)
	// *
	// Удаление банковской карты по модели (например полученной с помощью FindCardCompanyByID)
	DeleteCardCompanyByModel(ctx context.Context, in *CardCompany, opts ...grpc.CallOption) (*HTTPCodes, error)
	// *
	// Удаление банковской карты компании по ID
	DeleteCardCompanyById(ctx context.Context, in *DeleteCardCompanyByIdRequest, opts ...grpc.CallOption) (*HTTPCodes, error)
	// *
	// Обновление банковской карты компании
	UpdateCardCompany(ctx context.Context, in *CardCompany, opts ...grpc.CallOption) (*CardCompany, error)
	// *
	// Список всех пожертвований
	Donations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DonationsResponse, error)
	// *
	// Создание пожертвования
	CreateDonations(ctx context.Context, in *CreateDonationsRequest, opts ...grpc.CallOption) (*CreateDonationsResponse, error)
	// *
	// Поиск подопечных по ID пожертвования
	FindDonationWards(ctx context.Context, in *FindDonationWardsRequest, opts ...grpc.CallOption) (*FindDonationWardsResponse, error)
	// *
	// Поиск пожертвования по ID
	FindDonationById(ctx context.Context, in *FindDonationByIdRequest, opts ...grpc.CallOption) (*CreateDonationsResponse, error)
	// *
	// Удаление пожертвования по модели (например полученного с помощью FindDonationById)
	DeleteDonationByModel(ctx context.Context, in *DeleteDonationByModelRequest, opts ...grpc.CallOption) (*HTTPCodes, error)
	// *
	// Удаление пожертвование по ID
	DeleteDonationById(ctx context.Context, in *DeleteDonationByIdRequest, opts ...grpc.CallOption) (*HTTPCodes, error)
	// *
	// Обновление пожертвования
	UpdateDonation(ctx context.Context, in *UpdateDonationsRequest, opts ...grpc.CallOption) (*CreateDonationsResponse, error)
	// *
	// Список всех подопечных
	Wards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WardsResponse, error)
	// *
	// Создание подопечного
	CreateWard(ctx context.Context, in *CreateWardRequest, opts ...grpc.CallOption) (*Ward, error)
	// *
	// Поиск подопечного по его ID
	FindWardById(ctx context.Context, in *FindWardByIdRequest, opts ...grpc.CallOption) (*Ward, error)
	// *
	// Удаление подопечного по модели (например полученной с помощью FindWardById)
	DeleteWardByModel(ctx context.Context, in *Ward, opts ...grpc.CallOption) (*HTTPCodes, error)
	// *
	// Удаление подопечного по его ID
	DeleteWardById(ctx context.Context, in *DeleteWardByIdRequest, opts ...grpc.CallOption) (*HTTPCodes, error)
	// *
	// Обновление подопечного
	UpdateWard(ctx context.Context, in *Ward, opts ...grpc.CallOption) (*Ward, error)
}

type databaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseServiceClient(cc grpc.ClientConnInterface) DatabaseServiceClient {
	return &databaseServiceClient{cc}
}

func (c *databaseServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, DatabaseService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Users(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersResponse)
	err := c.cc.Invoke(ctx, DatabaseService_Users_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) IsRole(ctx context.Context, in *IsRoleRequest, opts ...grpc.CallOption) (*IsRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsRoleResponse)
	err := c.cc.Invoke(ctx, DatabaseService_IsRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ComparePassword(ctx context.Context, in *ComparePasswordRequest, opts ...grpc.CallOption) (*ComparePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComparePasswordResponse)
	err := c.cc.Invoke(ctx, DatabaseService_ComparePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UserIsExists(ctx context.Context, in *UserIsExistsRequest, opts ...grpc.CallOption) (*UserIsExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserIsExistsResponse)
	err := c.cc.Invoke(ctx, DatabaseService_UserIsExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FindUserById(ctx context.Context, in *FindUserByIdRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, DatabaseService_FindUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FindUserByEmail(ctx context.Context, in *FindUserByEmailRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, DatabaseService_FindUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FindUserByPhone(ctx context.Context, in *FindUserByPhoneRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, DatabaseService_FindUserByPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ChangeUserType(ctx context.Context, in *ChangeUserTypeRequest, opts ...grpc.CallOption) (*ChangeUserTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserTypeResponse)
	err := c.cc.Invoke(ctx, DatabaseService_ChangeUserType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FindUserCompany(ctx context.Context, in *FindUserCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Company)
	err := c.cc.Invoke(ctx, DatabaseService_FindUserCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FindUserDonations(ctx context.Context, in *FindUserDonationsRequest, opts ...grpc.CallOption) (*FindUserDonationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindUserDonationsResponse)
	err := c.cc.Invoke(ctx, DatabaseService_FindUserDonations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FindUserCard(ctx context.Context, in *FindUserCardRequest, opts ...grpc.CallOption) (*FindUserCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindUserCardResponse)
	err := c.cc.Invoke(ctx, DatabaseService_FindUserCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) AddCardToUser(ctx context.Context, in *AddCardToUserRequest, opts ...grpc.CallOption) (*AddCardToUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCardToUserResponse)
	err := c.cc.Invoke(ctx, DatabaseService_AddCardToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteUserByModel(ctx context.Context, in *DeleteUserByModelRequest, opts ...grpc.CallOption) (*HTTPCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPCodes)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteUserByModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteUserById(ctx context.Context, in *DeleteUserByIdRequest, opts ...grpc.CallOption) (*HTTPCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPCodes)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Companies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CompaniesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompaniesResponse)
	err := c.cc.Invoke(ctx, DatabaseService_Companies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Company)
	err := c.cc.Invoke(ctx, DatabaseService_CreateCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FindCompanyById(ctx context.Context, in *FindCompanyByIdRequest, opts ...grpc.CallOption) (*Company, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Company)
	err := c.cc.Invoke(ctx, DatabaseService_FindCompanyById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FindCompanyByPhone(ctx context.Context, in *FindCompanyByIdPhoneRequest, opts ...grpc.CallOption) (*Company, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Company)
	err := c.cc.Invoke(ctx, DatabaseService_FindCompanyByPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FindCompanyCard(ctx context.Context, in *FindCompanyCardRequest, opts ...grpc.CallOption) (*CardCompany, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardCompany)
	err := c.cc.Invoke(ctx, DatabaseService_FindCompanyCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteCompanyByModel(ctx context.Context, in *DeleteCompanyByModelRequest, opts ...grpc.CallOption) (*HTTPCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPCodes)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteCompanyByModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteCompanyById(ctx context.Context, in *DeleteCompanyByIdRequest, opts ...grpc.CallOption) (*HTTPCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPCodes)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteCompanyById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*HTTPCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPCodes)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Cards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardsResponse)
	err := c.cc.Invoke(ctx, DatabaseService_Cards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, DatabaseService_CreateCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FindCardById(ctx context.Context, in *FindCardByIdRequest, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, DatabaseService_FindCardById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteCardByModel(ctx context.Context, in *Card, opts ...grpc.CallOption) (*HTTPCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPCodes)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteCardByModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteCardById(ctx context.Context, in *DeleteCardByIdRequest, opts ...grpc.CallOption) (*HTTPCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPCodes)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteCardById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) CardsCompanies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CardsCompaniesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardsCompaniesResponse)
	err := c.cc.Invoke(ctx, DatabaseService_CardsCompanies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) CreateCardCompany(ctx context.Context, in *CreateCardCompanyRequest, opts ...grpc.CallOption) (*CardCompany, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardCompany)
	err := c.cc.Invoke(ctx, DatabaseService_CreateCardCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FindCardCompanyByID(ctx context.Context, in *FindCardCompanyByIDRequest, opts ...grpc.CallOption) (*CardCompany, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardCompany)
	err := c.cc.Invoke(ctx, DatabaseService_FindCardCompanyByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteCardCompanyByModel(ctx context.Context, in *CardCompany, opts ...grpc.CallOption) (*HTTPCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPCodes)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteCardCompanyByModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteCardCompanyById(ctx context.Context, in *DeleteCardCompanyByIdRequest, opts ...grpc.CallOption) (*HTTPCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPCodes)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteCardCompanyById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateCardCompany(ctx context.Context, in *CardCompany, opts ...grpc.CallOption) (*CardCompany, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardCompany)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateCardCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Donations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DonationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DonationsResponse)
	err := c.cc.Invoke(ctx, DatabaseService_Donations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) CreateDonations(ctx context.Context, in *CreateDonationsRequest, opts ...grpc.CallOption) (*CreateDonationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDonationsResponse)
	err := c.cc.Invoke(ctx, DatabaseService_CreateDonations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FindDonationWards(ctx context.Context, in *FindDonationWardsRequest, opts ...grpc.CallOption) (*FindDonationWardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindDonationWardsResponse)
	err := c.cc.Invoke(ctx, DatabaseService_FindDonationWards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FindDonationById(ctx context.Context, in *FindDonationByIdRequest, opts ...grpc.CallOption) (*CreateDonationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDonationsResponse)
	err := c.cc.Invoke(ctx, DatabaseService_FindDonationById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteDonationByModel(ctx context.Context, in *DeleteDonationByModelRequest, opts ...grpc.CallOption) (*HTTPCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPCodes)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteDonationByModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteDonationById(ctx context.Context, in *DeleteDonationByIdRequest, opts ...grpc.CallOption) (*HTTPCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPCodes)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteDonationById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateDonation(ctx context.Context, in *UpdateDonationsRequest, opts ...grpc.CallOption) (*CreateDonationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDonationsResponse)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateDonation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Wards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WardsResponse)
	err := c.cc.Invoke(ctx, DatabaseService_Wards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) CreateWard(ctx context.Context, in *CreateWardRequest, opts ...grpc.CallOption) (*Ward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ward)
	err := c.cc.Invoke(ctx, DatabaseService_CreateWard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FindWardById(ctx context.Context, in *FindWardByIdRequest, opts ...grpc.CallOption) (*Ward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ward)
	err := c.cc.Invoke(ctx, DatabaseService_FindWardById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteWardByModel(ctx context.Context, in *Ward, opts ...grpc.CallOption) (*HTTPCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPCodes)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteWardByModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteWardById(ctx context.Context, in *DeleteWardByIdRequest, opts ...grpc.CallOption) (*HTTPCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPCodes)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteWardById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateWard(ctx context.Context, in *Ward, opts ...grpc.CallOption) (*Ward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ward)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateWard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServiceServer is the server API for DatabaseService service.
// All implementations must embed UnimplementedDatabaseServiceServer
// for forward compatibility.
//
// *
// Доступные API методы
type DatabaseServiceServer interface {
	// *
	// Создание нового пользователя
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// *
	// Список всех пользователей
	Users(context.Context, *Empty) (*UsersResponse, error)
	// *
	// Проверяет принадлежность пользователя к необходимой роли
	IsRole(context.Context, *IsRoleRequest) (*IsRoleResponse, error)
	// *
	// Сравнивает введенный пароль пользователя с тем, что находится в базе данных
	ComparePassword(context.Context, *ComparePasswordRequest) (*ComparePasswordResponse, error)
	// *
	// Проверка на существования пользователя в базе данных (проверяет по номеру телефона)
	UserIsExists(context.Context, *UserIsExistsRequest) (*UserIsExistsResponse, error)
	// *
	// Поиск пользователя по его ID
	FindUserById(context.Context, *FindUserByIdRequest) (*CreateUserResponse, error)
	// *
	// Поиск пользователя по его email
	FindUserByEmail(context.Context, *FindUserByEmailRequest) (*CreateUserResponse, error)
	// *
	// Поиск пользователя по номеру телефона
	FindUserByPhone(context.Context, *FindUserByPhoneRequest) (*CreateUserResponse, error)
	// *
	// Изменение типа пользователя (0 - физическое лицо, 1 - юридическое лицо)
	ChangeUserType(context.Context, *ChangeUserTypeRequest) (*ChangeUserTypeResponse, error)
	// *
	// Поиск компании определенного пользователя
	FindUserCompany(context.Context, *FindUserCompanyRequest) (*Company, error)
	// *
	// Поиск пожертвований определенного пользователя
	FindUserDonations(context.Context, *FindUserDonationsRequest) (*FindUserDonationsResponse, error)
	// *
	// Поиск банковских карт определенного пользователя
	FindUserCard(context.Context, *FindUserCardRequest) (*FindUserCardResponse, error)
	// *
	// Добавляет банковскую карту пользователю
	AddCardToUser(context.Context, *AddCardToUserRequest) (*AddCardToUserResponse, error)
	// *
	// Удаление пользователя по полной модели (например полученной с помощью FindUserById)
	DeleteUserByModel(context.Context, *DeleteUserByModelRequest) (*HTTPCodes, error)
	// *
	// Удаляет пользователя по его ID
	DeleteUserById(context.Context, *DeleteUserByIdRequest) (*HTTPCodes, error)
	// *
	// Обновление пользователя
	UpdateUser(context.Context, *UpdateUserRequest) (*CreateUserResponse, error)
	// *
	// Список всех компаний
	Companies(context.Context, *Empty) (*CompaniesResponse, error)
	// *
	// Создание компании
	CreateCompany(context.Context, *CreateCompanyRequest) (*Company, error)
	// *
	// Поиск компании по ее ID
	FindCompanyById(context.Context, *FindCompanyByIdRequest) (*Company, error)
	// *
	// Поиск компании по номеру телефона
	FindCompanyByPhone(context.Context, *FindCompanyByIdPhoneRequest) (*Company, error)
	// *
	// Поиск банковской карты компании
	FindCompanyCard(context.Context, *FindCompanyCardRequest) (*CardCompany, error)
	// *
	// Удаление компании по модели (например полученной с помощью  FindCompanyById)
	DeleteCompanyByModel(context.Context, *DeleteCompanyByModelRequest) (*HTTPCodes, error)
	// *
	// Удаление компании по ее ID
	DeleteCompanyById(context.Context, *DeleteCompanyByIdRequest) (*HTTPCodes, error)
	// *
	// Обновление компании
	UpdateCompany(context.Context, *UpdateCompanyRequest) (*HTTPCodes, error)
	// *
	// Поиск всех банковских карт пользователей
	Cards(context.Context, *Empty) (*CardsResponse, error)
	// *
	// Создание банковской карты
	CreateCard(context.Context, *CreateCardRequest) (*Card, error)
	// *
	// Поиск банковской карты по ее ID
	FindCardById(context.Context, *FindCardByIdRequest) (*Card, error)
	// *
	// Удаление банковской карты по модели (например полученной с помощью FindCardById)
	DeleteCardByModel(context.Context, *Card) (*HTTPCodes, error)
	// *
	// Удаление банковской карты по ID
	DeleteCardById(context.Context, *DeleteCardByIdRequest) (*HTTPCodes, error)
	// *
	// Обновление банковской карты
	UpdateCard(context.Context, *Card) (*Card, error)
	// *
	// Поиск всех банковских карт компаний
	CardsCompanies(context.Context, *Empty) (*CardsCompaniesResponse, error)
	// *
	// Создание банковской карты компании
	CreateCardCompany(context.Context, *CreateCardCompanyRequest) (*CardCompany, error)
	// *
	// Поиск банковской карты компании по ID
	FindCardCompanyByID(context.Context, *FindCardCompanyByIDRequest) (*CardCompany, error)
	// *
	// Удаление банковской карты по модели (например полученной с помощью FindCardCompanyByID)
	DeleteCardCompanyByModel(context.Context, *CardCompany) (*HTTPCodes, error)
	// *
	// Удаление банковской карты компании по ID
	DeleteCardCompanyById(context.Context, *DeleteCardCompanyByIdRequest) (*HTTPCodes, error)
	// *
	// Обновление банковской карты компании
	UpdateCardCompany(context.Context, *CardCompany) (*CardCompany, error)
	// *
	// Список всех пожертвований
	Donations(context.Context, *Empty) (*DonationsResponse, error)
	// *
	// Создание пожертвования
	CreateDonations(context.Context, *CreateDonationsRequest) (*CreateDonationsResponse, error)
	// *
	// Поиск подопечных по ID пожертвования
	FindDonationWards(context.Context, *FindDonationWardsRequest) (*FindDonationWardsResponse, error)
	// *
	// Поиск пожертвования по ID
	FindDonationById(context.Context, *FindDonationByIdRequest) (*CreateDonationsResponse, error)
	// *
	// Удаление пожертвования по модели (например полученного с помощью FindDonationById)
	DeleteDonationByModel(context.Context, *DeleteDonationByModelRequest) (*HTTPCodes, error)
	// *
	// Удаление пожертвование по ID
	DeleteDonationById(context.Context, *DeleteDonationByIdRequest) (*HTTPCodes, error)
	// *
	// Обновление пожертвования
	UpdateDonation(context.Context, *UpdateDonationsRequest) (*CreateDonationsResponse, error)
	// *
	// Список всех подопечных
	Wards(context.Context, *Empty) (*WardsResponse, error)
	// *
	// Создание подопечного
	CreateWard(context.Context, *CreateWardRequest) (*Ward, error)
	// *
	// Поиск подопечного по его ID
	FindWardById(context.Context, *FindWardByIdRequest) (*Ward, error)
	// *
	// Удаление подопечного по модели (например полученной с помощью FindWardById)
	DeleteWardByModel(context.Context, *Ward) (*HTTPCodes, error)
	// *
	// Удаление подопечного по его ID
	DeleteWardById(context.Context, *DeleteWardByIdRequest) (*HTTPCodes, error)
	// *
	// Обновление подопечного
	UpdateWard(context.Context, *Ward) (*Ward, error)
	mustEmbedUnimplementedDatabaseServiceServer()
}

// UnimplementedDatabaseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDatabaseServiceServer struct{}

func (UnimplementedDatabaseServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedDatabaseServiceServer) Users(context.Context, *Empty) (*UsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Users not implemented")
}
func (UnimplementedDatabaseServiceServer) IsRole(context.Context, *IsRoleRequest) (*IsRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsRole not implemented")
}
func (UnimplementedDatabaseServiceServer) ComparePassword(context.Context, *ComparePasswordRequest) (*ComparePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComparePassword not implemented")
}
func (UnimplementedDatabaseServiceServer) UserIsExists(context.Context, *UserIsExistsRequest) (*UserIsExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIsExists not implemented")
}
func (UnimplementedDatabaseServiceServer) FindUserById(context.Context, *FindUserByIdRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserById not implemented")
}
func (UnimplementedDatabaseServiceServer) FindUserByEmail(context.Context, *FindUserByEmailRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByEmail not implemented")
}
func (UnimplementedDatabaseServiceServer) FindUserByPhone(context.Context, *FindUserByPhoneRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByPhone not implemented")
}
func (UnimplementedDatabaseServiceServer) ChangeUserType(context.Context, *ChangeUserTypeRequest) (*ChangeUserTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserType not implemented")
}
func (UnimplementedDatabaseServiceServer) FindUserCompany(context.Context, *FindUserCompanyRequest) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserCompany not implemented")
}
func (UnimplementedDatabaseServiceServer) FindUserDonations(context.Context, *FindUserDonationsRequest) (*FindUserDonationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserDonations not implemented")
}
func (UnimplementedDatabaseServiceServer) FindUserCard(context.Context, *FindUserCardRequest) (*FindUserCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserCard not implemented")
}
func (UnimplementedDatabaseServiceServer) AddCardToUser(context.Context, *AddCardToUserRequest) (*AddCardToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCardToUser not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteUserByModel(context.Context, *DeleteUserByModelRequest) (*HTTPCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserByModel not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteUserById(context.Context, *DeleteUserByIdRequest) (*HTTPCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserById not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedDatabaseServiceServer) Companies(context.Context, *Empty) (*CompaniesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Companies not implemented")
}
func (UnimplementedDatabaseServiceServer) CreateCompany(context.Context, *CreateCompanyRequest) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (UnimplementedDatabaseServiceServer) FindCompanyById(context.Context, *FindCompanyByIdRequest) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCompanyById not implemented")
}
func (UnimplementedDatabaseServiceServer) FindCompanyByPhone(context.Context, *FindCompanyByIdPhoneRequest) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCompanyByPhone not implemented")
}
func (UnimplementedDatabaseServiceServer) FindCompanyCard(context.Context, *FindCompanyCardRequest) (*CardCompany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCompanyCard not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteCompanyByModel(context.Context, *DeleteCompanyByModelRequest) (*HTTPCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompanyByModel not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteCompanyById(context.Context, *DeleteCompanyByIdRequest) (*HTTPCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompanyById not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateCompany(context.Context, *UpdateCompanyRequest) (*HTTPCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (UnimplementedDatabaseServiceServer) Cards(context.Context, *Empty) (*CardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cards not implemented")
}
func (UnimplementedDatabaseServiceServer) CreateCard(context.Context, *CreateCardRequest) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedDatabaseServiceServer) FindCardById(context.Context, *FindCardByIdRequest) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCardById not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteCardByModel(context.Context, *Card) (*HTTPCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCardByModel not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteCardById(context.Context, *DeleteCardByIdRequest) (*HTTPCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCardById not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateCard(context.Context, *Card) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (UnimplementedDatabaseServiceServer) CardsCompanies(context.Context, *Empty) (*CardsCompaniesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardsCompanies not implemented")
}
func (UnimplementedDatabaseServiceServer) CreateCardCompany(context.Context, *CreateCardCompanyRequest) (*CardCompany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCardCompany not implemented")
}
func (UnimplementedDatabaseServiceServer) FindCardCompanyByID(context.Context, *FindCardCompanyByIDRequest) (*CardCompany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCardCompanyByID not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteCardCompanyByModel(context.Context, *CardCompany) (*HTTPCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCardCompanyByModel not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteCardCompanyById(context.Context, *DeleteCardCompanyByIdRequest) (*HTTPCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCardCompanyById not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateCardCompany(context.Context, *CardCompany) (*CardCompany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCardCompany not implemented")
}
func (UnimplementedDatabaseServiceServer) Donations(context.Context, *Empty) (*DonationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Donations not implemented")
}
func (UnimplementedDatabaseServiceServer) CreateDonations(context.Context, *CreateDonationsRequest) (*CreateDonationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDonations not implemented")
}
func (UnimplementedDatabaseServiceServer) FindDonationWards(context.Context, *FindDonationWardsRequest) (*FindDonationWardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDonationWards not implemented")
}
func (UnimplementedDatabaseServiceServer) FindDonationById(context.Context, *FindDonationByIdRequest) (*CreateDonationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDonationById not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteDonationByModel(context.Context, *DeleteDonationByModelRequest) (*HTTPCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDonationByModel not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteDonationById(context.Context, *DeleteDonationByIdRequest) (*HTTPCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDonationById not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateDonation(context.Context, *UpdateDonationsRequest) (*CreateDonationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDonation not implemented")
}
func (UnimplementedDatabaseServiceServer) Wards(context.Context, *Empty) (*WardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wards not implemented")
}
func (UnimplementedDatabaseServiceServer) CreateWard(context.Context, *CreateWardRequest) (*Ward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWard not implemented")
}
func (UnimplementedDatabaseServiceServer) FindWardById(context.Context, *FindWardByIdRequest) (*Ward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWardById not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteWardByModel(context.Context, *Ward) (*HTTPCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWardByModel not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteWardById(context.Context, *DeleteWardByIdRequest) (*HTTPCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWardById not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateWard(context.Context, *Ward) (*Ward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWard not implemented")
}
func (UnimplementedDatabaseServiceServer) mustEmbedUnimplementedDatabaseServiceServer() {}
func (UnimplementedDatabaseServiceServer) testEmbeddedByValue()                         {}

// UnsafeDatabaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServiceServer will
// result in compilation errors.
type UnsafeDatabaseServiceServer interface {
	mustEmbedUnimplementedDatabaseServiceServer()
}

func RegisterDatabaseServiceServer(s grpc.ServiceRegistrar, srv DatabaseServiceServer) {
	// If the following call pancis, it indicates UnimplementedDatabaseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DatabaseService_ServiceDesc, srv)
}

func _DatabaseService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Users_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Users(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_Users_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Users(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_IsRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).IsRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_IsRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).IsRole(ctx, req.(*IsRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ComparePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComparePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ComparePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_ComparePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ComparePassword(ctx, req.(*ComparePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UserIsExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIsExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UserIsExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UserIsExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UserIsExists(ctx, req.(*UserIsExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FindUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FindUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FindUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FindUserById(ctx, req.(*FindUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FindUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FindUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FindUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FindUserByEmail(ctx, req.(*FindUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FindUserByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FindUserByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FindUserByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FindUserByPhone(ctx, req.(*FindUserByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ChangeUserType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ChangeUserType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_ChangeUserType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ChangeUserType(ctx, req.(*ChangeUserTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FindUserCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FindUserCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FindUserCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FindUserCompany(ctx, req.(*FindUserCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FindUserDonations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserDonationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FindUserDonations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FindUserDonations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FindUserDonations(ctx, req.(*FindUserDonationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FindUserCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FindUserCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FindUserCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FindUserCard(ctx, req.(*FindUserCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_AddCardToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).AddCardToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_AddCardToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).AddCardToUser(ctx, req.(*AddCardToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteUserByModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserByModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteUserByModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteUserByModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteUserByModel(ctx, req.(*DeleteUserByModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteUserById(ctx, req.(*DeleteUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Companies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Companies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_Companies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Companies(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_CreateCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CreateCompany(ctx, req.(*CreateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FindCompanyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCompanyByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FindCompanyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FindCompanyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FindCompanyById(ctx, req.(*FindCompanyByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FindCompanyByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCompanyByIdPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FindCompanyByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FindCompanyByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FindCompanyByPhone(ctx, req.(*FindCompanyByIdPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FindCompanyCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCompanyCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FindCompanyCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FindCompanyCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FindCompanyCard(ctx, req.(*FindCompanyCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteCompanyByModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyByModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteCompanyByModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteCompanyByModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteCompanyByModel(ctx, req.(*DeleteCompanyByModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteCompanyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteCompanyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteCompanyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteCompanyById(ctx, req.(*DeleteCompanyByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateCompany(ctx, req.(*UpdateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Cards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Cards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_Cards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Cards(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_CreateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FindCardById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCardByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FindCardById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FindCardById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FindCardById(ctx, req.(*FindCardByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteCardByModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteCardByModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteCardByModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteCardByModel(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteCardById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteCardById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteCardById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteCardById(ctx, req.(*DeleteCardByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateCard(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_CardsCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CardsCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_CardsCompanies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CardsCompanies(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_CreateCardCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CreateCardCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_CreateCardCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CreateCardCompany(ctx, req.(*CreateCardCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FindCardCompanyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCardCompanyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FindCardCompanyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FindCardCompanyByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FindCardCompanyByID(ctx, req.(*FindCardCompanyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteCardCompanyByModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardCompany)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteCardCompanyByModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteCardCompanyByModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteCardCompanyByModel(ctx, req.(*CardCompany))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteCardCompanyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardCompanyByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteCardCompanyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteCardCompanyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteCardCompanyById(ctx, req.(*DeleteCardCompanyByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateCardCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardCompany)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateCardCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateCardCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateCardCompany(ctx, req.(*CardCompany))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Donations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Donations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_Donations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Donations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_CreateDonations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDonationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CreateDonations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_CreateDonations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CreateDonations(ctx, req.(*CreateDonationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FindDonationWards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDonationWardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FindDonationWards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FindDonationWards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FindDonationWards(ctx, req.(*FindDonationWardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FindDonationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDonationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FindDonationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FindDonationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FindDonationById(ctx, req.(*FindDonationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteDonationByModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDonationByModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteDonationByModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteDonationByModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteDonationByModel(ctx, req.(*DeleteDonationByModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteDonationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDonationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteDonationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteDonationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteDonationById(ctx, req.(*DeleteDonationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateDonation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDonationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateDonation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateDonation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateDonation(ctx, req.(*UpdateDonationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Wards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Wards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_Wards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Wards(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_CreateWard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CreateWard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_CreateWard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CreateWard(ctx, req.(*CreateWardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FindWardById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindWardByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FindWardById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FindWardById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FindWardById(ctx, req.(*FindWardByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteWardByModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteWardByModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteWardByModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteWardByModel(ctx, req.(*Ward))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteWardById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWardByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteWardById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteWardById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteWardById(ctx, req.(*DeleteWardByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateWard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateWard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateWard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateWard(ctx, req.(*Ward))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseService_ServiceDesc is the grpc.ServiceDesc for DatabaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.DatabaseService",
	HandlerType: (*DatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _DatabaseService_CreateUser_Handler,
		},
		{
			MethodName: "Users",
			Handler:    _DatabaseService_Users_Handler,
		},
		{
			MethodName: "IsRole",
			Handler:    _DatabaseService_IsRole_Handler,
		},
		{
			MethodName: "ComparePassword",
			Handler:    _DatabaseService_ComparePassword_Handler,
		},
		{
			MethodName: "UserIsExists",
			Handler:    _DatabaseService_UserIsExists_Handler,
		},
		{
			MethodName: "FindUserById",
			Handler:    _DatabaseService_FindUserById_Handler,
		},
		{
			MethodName: "FindUserByEmail",
			Handler:    _DatabaseService_FindUserByEmail_Handler,
		},
		{
			MethodName: "FindUserByPhone",
			Handler:    _DatabaseService_FindUserByPhone_Handler,
		},
		{
			MethodName: "ChangeUserType",
			Handler:    _DatabaseService_ChangeUserType_Handler,
		},
		{
			MethodName: "FindUserCompany",
			Handler:    _DatabaseService_FindUserCompany_Handler,
		},
		{
			MethodName: "FindUserDonations",
			Handler:    _DatabaseService_FindUserDonations_Handler,
		},
		{
			MethodName: "FindUserCard",
			Handler:    _DatabaseService_FindUserCard_Handler,
		},
		{
			MethodName: "AddCardToUser",
			Handler:    _DatabaseService_AddCardToUser_Handler,
		},
		{
			MethodName: "DeleteUserByModel",
			Handler:    _DatabaseService_DeleteUserByModel_Handler,
		},
		{
			MethodName: "DeleteUserById",
			Handler:    _DatabaseService_DeleteUserById_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _DatabaseService_UpdateUser_Handler,
		},
		{
			MethodName: "Companies",
			Handler:    _DatabaseService_Companies_Handler,
		},
		{
			MethodName: "CreateCompany",
			Handler:    _DatabaseService_CreateCompany_Handler,
		},
		{
			MethodName: "FindCompanyById",
			Handler:    _DatabaseService_FindCompanyById_Handler,
		},
		{
			MethodName: "FindCompanyByPhone",
			Handler:    _DatabaseService_FindCompanyByPhone_Handler,
		},
		{
			MethodName: "FindCompanyCard",
			Handler:    _DatabaseService_FindCompanyCard_Handler,
		},
		{
			MethodName: "DeleteCompanyByModel",
			Handler:    _DatabaseService_DeleteCompanyByModel_Handler,
		},
		{
			MethodName: "DeleteCompanyById",
			Handler:    _DatabaseService_DeleteCompanyById_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _DatabaseService_UpdateCompany_Handler,
		},
		{
			MethodName: "Cards",
			Handler:    _DatabaseService_Cards_Handler,
		},
		{
			MethodName: "CreateCard",
			Handler:    _DatabaseService_CreateCard_Handler,
		},
		{
			MethodName: "FindCardById",
			Handler:    _DatabaseService_FindCardById_Handler,
		},
		{
			MethodName: "DeleteCardByModel",
			Handler:    _DatabaseService_DeleteCardByModel_Handler,
		},
		{
			MethodName: "DeleteCardById",
			Handler:    _DatabaseService_DeleteCardById_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _DatabaseService_UpdateCard_Handler,
		},
		{
			MethodName: "CardsCompanies",
			Handler:    _DatabaseService_CardsCompanies_Handler,
		},
		{
			MethodName: "CreateCardCompany",
			Handler:    _DatabaseService_CreateCardCompany_Handler,
		},
		{
			MethodName: "FindCardCompanyByID",
			Handler:    _DatabaseService_FindCardCompanyByID_Handler,
		},
		{
			MethodName: "DeleteCardCompanyByModel",
			Handler:    _DatabaseService_DeleteCardCompanyByModel_Handler,
		},
		{
			MethodName: "DeleteCardCompanyById",
			Handler:    _DatabaseService_DeleteCardCompanyById_Handler,
		},
		{
			MethodName: "UpdateCardCompany",
			Handler:    _DatabaseService_UpdateCardCompany_Handler,
		},
		{
			MethodName: "Donations",
			Handler:    _DatabaseService_Donations_Handler,
		},
		{
			MethodName: "CreateDonations",
			Handler:    _DatabaseService_CreateDonations_Handler,
		},
		{
			MethodName: "FindDonationWards",
			Handler:    _DatabaseService_FindDonationWards_Handler,
		},
		{
			MethodName: "FindDonationById",
			Handler:    _DatabaseService_FindDonationById_Handler,
		},
		{
			MethodName: "DeleteDonationByModel",
			Handler:    _DatabaseService_DeleteDonationByModel_Handler,
		},
		{
			MethodName: "DeleteDonationById",
			Handler:    _DatabaseService_DeleteDonationById_Handler,
		},
		{
			MethodName: "UpdateDonation",
			Handler:    _DatabaseService_UpdateDonation_Handler,
		},
		{
			MethodName: "Wards",
			Handler:    _DatabaseService_Wards_Handler,
		},
		{
			MethodName: "CreateWard",
			Handler:    _DatabaseService_CreateWard_Handler,
		},
		{
			MethodName: "FindWardById",
			Handler:    _DatabaseService_FindWardById_Handler,
		},
		{
			MethodName: "DeleteWardByModel",
			Handler:    _DatabaseService_DeleteWardByModel_Handler,
		},
		{
			MethodName: "DeleteWardById",
			Handler:    _DatabaseService_DeleteWardById_Handler,
		},
		{
			MethodName: "UpdateWard",
			Handler:    _DatabaseService_UpdateWard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DatabaseService/DatabaseService.proto",
}
